public static void compactarArquivos(List<String> arquivos, String nomeBackup) throws IOException {
        // Gerar nome para a pasta de backup (data e hora)
        String backupFolderName = PastaBackups + "/"
                + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        Path backupFolderPath = Paths.get(backupFolderName);
    
        // Criar pasta de backup, se não existir
        Files.createDirectories(backupFolderPath);
    
        // Nome do arquivo de backup
        String backupFileName = backupFolderPath.toString() + "/" + nomeBackup + ".lzw";
    
        try (DataOutputStream out = new DataOutputStream(new FileOutputStream(backupFileName))) {
            for (String caminho : arquivos) {
                File arquivo = new File(caminho);
    
                if (!arquivo.exists()) {
                    System.err.println("Arquivo não encontrado: " + caminho);
                    continue;
                }
    
                // Ler conteúdo do arquivo como vetor de bytes
                byte[] data = Files.readAllBytes(arquivo.toPath());
    
                // Compactar os dados usando LZW
                byte[] compressed = lzw.compressLZW(data);
    
                // Escrever informações no backup
                out.writeUTF(arquivo.getName()); // Nome do arquivo
                out.writeInt(compressed.length); // Tamanho do arquivo compactado
                out.write(compressed); // Escrever os bytes compactados diretamente
    
                // Chamar o método medirCompressao
                //medirCompressao(caminho, backupFileName);
            }
        }
    
        System.out.println("Backup criado na pasta: " + backupFolderPath);
    }
    
    public static void medirCompressao(String arquivoOriginal, String arquivoCompactado) {
        File original = new File(arquivoOriginal);
        File compactado = new File(arquivoCompactado);
    
        long tamanhoOriginal = original.length();
        long tamanhoCompactado = compactado.length();
    
        System.out.println("Tamanho original: " + tamanhoOriginal + " bytes");
        System.out.println("Tamanho compactado: " + tamanhoCompactado + " bytes");
    
        if (tamanhoCompactado >= tamanhoOriginal) {
            System.out.println("O arquivo compactado é maior ou igual ao original!");
        } else {
            System.out.printf("Taxa de compressão: %.2f%%\n",
                    (1.0 - (double) tamanhoCompactado / tamanhoOriginal) * 100);
        }
    }
    
    public static void descompactarArquivos(String arquivoBackup) throws IOException {
        File backupFile = new File(arquivoBackup);
    
        if (!backupFile.exists()) {
            System.err.println("Arquivo de backup não encontrado: " + arquivoBackup);
            return;
        }
    
        try (DataInputStream in = new DataInputStream(new FileInputStream(backupFile))) {
            while (in.available() > 0) {
                String fileName = in.readUTF();  // Nome do arquivo original
                int compressedSize = in.readInt();  // Tamanho do arquivo compactado
    
                if (compressedSize <= 0) {
                    System.err.println("Erro: o arquivo compactado está vazio ou mal formado.");
                    continue;
                }
    
                // Ler os bytes compactados
                byte[] compressed = new byte[compressedSize];
                in.readFully(compressed);
    
                // Descompactar os dados
                byte[] decompressed = lzw.decompressLZW(compressed);
    
                // Caminho do arquivo de destino
                Path filePath = Paths.get(PastaDados, fileName);
    
                // Garantir que o arquivo de destino seja sobrescrito
                try (FileOutputStream fos = new FileOutputStream(filePath.toFile())) {
                    fos.write(decompressed);
                }
    
                System.out.println("Arquivo descompactado: " + fileName);
            }
        }
    }
package Classes;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.util.*;

public class lzw {
    // Método de descompactação LZW
    public static byte[] decompressLZW(byte[] compressed) {
        int maxTableSize = 4096; // 12 bits
        List<Integer> compressedData = toIntList(compressed);
        Map<Integer, String> dictionary = new HashMap<>();
        List<Byte> decompressedData = new ArrayList<>();

        int dictSize = 256; // Inicializa com os 256 caracteres ASCII

        // Inicializa a tabela de dicionário com caracteres ASCII
        for (int i = 0; i < 256; i++) {
            dictionary.put(i, String.valueOf((char) i));
        }

        String currentString = String.valueOf((char) (int) compressedData.get(0));
        decompressedData.add((byte) currentString.charAt(0));

        for (int i = 1; i < compressedData.size(); i++) {
            int code = compressedData.get(i);
            String entry;

            if (dictionary.containsKey(code)) {
                entry = dictionary.get(code);
            } else if (code == dictSize) {
                entry = currentString + currentString.charAt(0);
            } else {
                throw new IllegalArgumentException("Invalid LZW code");
            }

            for (char c : entry.toCharArray()) {
                decompressedData.add((byte) c);
            }

            // Adiciona nova sequência ao dicionário
            if (dictionary.size() < maxTableSize) {
                dictionary.put(dictSize++, currentString + entry.charAt(0));
            }

            currentString = entry;
        }

        // Converte a lista de bytes de volta para um array
        byte[] decompressedArray = new byte[decompressedData.size()];
        for (int i = 0; i < decompressedData.size(); i++) {
            decompressedArray[i] = decompressedData.get(i);
        }
        return decompressedArray;
    }

    // Converte o array de bytes compactados para uma lista de inteiros
    private static List<Integer> toIntList(byte[] compressed) {
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < compressed.length; i += 2) {
            int value = (compressed[i] << 8) | (compressed[i + 1] & 0xFF);
            list.add(value);
        }
        return list;
    }

    // Método de compactação LZW
    public static byte[] compressLZW(byte[] input) {
        // Tabela de códigos
        int maxTableSize = 4096; // 12 bits
        Map<String, Integer> dictionary = new HashMap<>();
        StringBuilder currentString = new StringBuilder();
        List<Integer> compressedData = new ArrayList<>();

        int dictSize = 256; // A tabela começa com os 256 caracteres ASCII

        // Inicializa o dicionário com caracteres ASCII
        for (int i = 0; i < 256; i++) {
            dictionary.put(String.valueOf((char) i), i);
        }

        for (byte b : input) {
            char c = (char) b;
            currentString.append(c);

            // Se a sequência existe no dicionário, continue
            if (!dictionary.containsKey(currentString.toString())) {
                // Adiciona o código para a sequência anterior ao resultado
                compressedData.add(dictionary.get(currentString.substring(0, currentString.length() - 1)));

                // Adiciona a nova sequência ao dicionário
                if (dictionary.size() < maxTableSize) {
                    dictionary.put(currentString.toString(), dictSize++);
                }

                // Reinicia a sequência
                currentString = new StringBuilder(String.valueOf(c));
            }
        }

        // Adiciona o código para a última sequência
        if (currentString.length() > 0) {
            compressedData.add(dictionary.get(currentString.toString()));
        }

        // Converte a lista de inteiros para um array de bytes
        return toByteArray(compressedData);
    }

    // Converte uma lista de inteiros para um array de bytes
    private static byte[] toByteArray(List<Integer> compressedData) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        for (int value : compressedData) {
            byteArrayOutputStream.write((value >> 8) & 0xFF);
            byteArrayOutputStream.write(value & 0xFF);
        }
        return byteArrayOutputStream.toByteArray();
    }
}
package Menus;

import Arquivos.ArquivoCategoria;
import Arquivos.ArquivoRotulo;
import Arquivos.ArquivoTarefa;
import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class MenuBackup {

    private static Scanner console = new Scanner(System.in);
    private static String PastaDados = "dados"; 
    private static String PastaBackups = "backups"; 

    public MenuBackup (  ) throws Exception {
    }

    public void menu() throws Exception {

        int opcao;
        do {

            System.out.println("AEDsIII");
            System.out.println("-------");
            System.out.println("\n> Início > Backups");
            System.out.println("1 - Criar Backup");
            System.out.println("2 - Carregar Backup");
            System.out.println("0 - Voltar");

            System.out.print("Opção: ");
            try {
                opcao = Integer.valueOf(console.nextLine());
            } catch (NumberFormatException e) {
                opcao = -1;
            }

            switch (opcao) {
                case 1:
                    comprimirTarefas();
                    break;
                case 2:
                    descomprimirTarefas();
                    break;
                case 0:
                    break;
                default:
                    System.out.println("Opção inválida!");
                    break;
            }

        } while (opcao != 0);
    }

    

    public void comprimirTarefas (  )  {
        try {
            System.out.println("Digite o nome do backup a ser salvo: ");
            String nomeBackup = console.nextLine();

            String[] result = getFileNames(PastaDados);
            List<String> arquivos = List.of(result);
            
            
            ArquivoTarefa.compactarArquivos(arquivos, nomeBackup);
        } catch (Exception e) {
            System.out.println("Erro: " + e.getMessage());
        }
    }

    public void descomprimirTarefas() {
        try {
            List<String> filePaths = getFilePaths(PastaBackups);
            int i = 1;

            for ( String contador : filePaths ) {
                String resultado = formatarDataHora(obterNomeArquivoEPasta(contador));
                System.out.println( i++ + ")" +resultado);
            }
            
            try {
                System.out.println( "Digite o numero do bakcup a ser recuperado: " );
                String entrada = console.nextLine();
                int numero = Integer.parseInt(entrada) - 1;
                
                if ( (numero > 0) && (numero < (i-1)) ) {
                    ArquivoTarefa.descompactarArquivos(filePaths.get(numero));
                }else{
                    System.out.println( "Numero não correspondente!" );
                }
            } catch (IOException e) {
                System.err.println("Erro ao descomprimir o arquivo: " + e.getMessage());
            }
            
        } catch (IllegalArgumentException e) {
            System.err.println("Erro: " + e.getMessage());
        }
    }

    public static String[] getFileNames(String folderPath) {
        List<String> fileNames = new ArrayList<>();
        File folder = new File(folderPath);

        // Verifica se o caminho é válido
        if (!folder.exists() || !folder.isDirectory()) {
            throw new IllegalArgumentException("O caminho especificado não é uma pasta válida.");
        }

        // Lê os arquivos na pasta
        File[] files = folder.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    fileNames.add(folderPath + File.separator + file.getName());
                }
            }
        }

        return fileNames.toArray(new String[0]);
    }

    public static List<String> getFilePaths(String folderPath) {
        List<String> filePaths = new ArrayList<>();
        File folder = new File(folderPath);

        // Verifica se o caminho é válido
        if (!folder.exists() || !folder.isDirectory()) {
            throw new IllegalArgumentException("O caminho especificado não é uma pasta válida.");
        }

        // Lê todas as pastas e arquivos recursivamente
        readFilesRecursively(folder, filePaths);

        return filePaths;
    }

    private static void readFilesRecursively(File folder, List<String> filePaths) {
        File[] files = folder.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    // Processa subpastas primeiro
                    readFilesRecursively(file, filePaths);
                } else if (file.isFile()) {
                    // Adiciona o caminho completo do arquivo
                    filePaths.add(file.getAbsolutePath());
                }
            }
        }
    }

    public static String obterNomeArquivoEPasta (String diretorio) {
        // Cria o objeto Path para o diretório
        Path caminho = Paths.get(diretorio);
        
        // Obtém o nome do arquivo sem a extensão
        String nomeArquivo = caminho.getFileName().toString();
        int posicaoPonto = nomeArquivo.lastIndexOf('.');
        if (posicaoPonto != -1) {
            nomeArquivo = nomeArquivo.substring(0, posicaoPonto);
        }
        
        // Obtém o nome da pasta acima do arquivo
        Path pastaAcima = caminho.getParent().getFileName();
        
        // Retorna ambos como uma string
        return nomeArquivo + " - " + pastaAcima.toString();
    }

    // Função para formatar a data e hora nas strings
    public static String formatarDataHora(String entrada) {
        // Separar a parte do nome do arquivo e a data/hora
        String[] partes = entrada.split(" - ");
        if (partes.length < 2) {
            System.out.println("Erro: Formato inválido.");
            return entrada;  // Retorna a entrada original se não estiver no formato esperado
        }

        // Extrair a data/hora (YYYYMMDD_hhmmss)
        String dataHora = partes[1];

        // Definir o formato de entrada
        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
        LocalDateTime localDateTime = LocalDateTime.parse(dataHora, inputFormatter);

        // Definir o formato de saída desejado
        DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        String dataHoraFormatada = localDateTime.format(outputFormatter);

        // Retornar a string formatada
        return partes[0] + " - " + dataHoraFormatada;
    }
}


> Início > Backups
1 - Criar Backup
2 - Carregar Backup
0 - Voltar
Opção: 1
Digite o nome do backup a ser salvo: 
teste
Erro: Cannot invoke "java.lang.Integer.intValue()" because the return value of "java.util.Iterator.next()" is null

Chat, o que causa o erro acima no código? 